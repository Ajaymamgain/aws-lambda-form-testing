service: form-testing-lambda

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 2048
  timeout: 60
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
    REGION: ${self:provider.region}
    SCREENSHOTS_BUCKET: ${self:service}-screenshots-${sls:stage}
    STAGE: ${sls:stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: 
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:service}-screenshots-${sls:stage}/*"
    - Effect: Allow
      Action:
        - events:PutRule
        - events:PutTargets
        - events:DeleteRule
        - events:RemoveTargets
        - events:DisableRule
        - events:EnableRule
        - events:ListRules
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packagerOptions:
      scripts:
        - npm rebuild playwright-core

functions:
  runTest:
    handler: src/handlers/run-test.handler
    events:
      - httpApi:
          path: /run-test
          method: post
          cors: true
  getTestResults:
    handler: src/handlers/get-test-results.handler
    events:
      - httpApi:
          path: /test-results
          method: get
          cors: true
  getTestResultDetail:
    handler: src/handlers/get-test-result-detail.handler
    events:
      - httpApi:
          path: /test-results/{id}
          method: get
          cors: true
  scheduleTest:
    handler: src/handlers/schedule-test.handler
    environment:
      RUN_SCHEDULED_TEST_LAMBDA_ARN: !GetAtt RunScheduledTestLambdaFunction.Arn
    events:
      - httpApi:
          path: /schedule-test
          method: post
          cors: true
  runScheduledTest:
    handler: src/handlers/run-scheduled-test.handler
    environment:
      AWS_LAMBDA_FUNCTION_NAME: !Ref RunScheduledTestLambdaFunction
    events:
      - schedule: rate(1 hour)

# Add additional endpoints for managing schedules
  getSchedules:
    handler: src/handlers/get-schedules.handler
    events:
      - httpApi:
          path: /schedules
          method: get
          cors: true
  getScheduleDetail:
    handler: src/handlers/get-schedule-detail.handler
    events:
      - httpApi:
          path: /schedules/{id}
          method: get
          cors: true
  updateSchedule:
    handler: src/handlers/update-schedule.handler
    events:
      - httpApi:
          path: /schedules/{id}
          method: patch
          cors: true
  setScheduleActive:
    handler: src/handlers/set-schedule-active.handler
    events:
      - httpApi:
          path: /schedules/{id}/active
          method: patch
          cors: true
  deleteSchedule:
    handler: src/handlers/delete-schedule.handler
    events:
      - httpApi:
          path: /schedules/{id}
          method: delete
          cors: true
  getScheduleRuns:
    handler: src/handlers/get-schedule-runs.handler
    events:
      - httpApi:
          path: /schedules/{id}/runs
          method: get
          cors: true

resources:
  Resources:
    FormTestingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: url
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UrlIndex
            KeySchema:
              - AttributeName: url
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: TypeIndex
            KeySchema:
              - AttributeName: type
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    ScreenshotBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-screenshots-${sls:stage}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
              AllowedOrigins:
                - '*'
              MaxAge: 3000
