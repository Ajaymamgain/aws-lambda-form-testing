service: form-testing-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  timeout: 30
  memorySize: 2048
  environment:
    RESULTS_BUCKET: ${self:custom.resultsBucket}
    TESTS_TABLE: ${self:service}-${self:provider.stage}-tests
    SCHEDULES_TABLE: ${self:service}-${self:provider.stage}-schedules
    NODE_OPTIONS: '--enable-source-maps'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: 
        - arn:aws:s3:::${self:custom.resultsBucket}/*
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-tests
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-schedules

custom:
  resultsBucket: ${self:service}-results-${self:provider.stage}
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
    packagerOptions:
      scripts:
        - rm -rf node_modules/puppeteer/.local-chromium
  prune:
    automatic: true
    number: 3

functions:
  runTest:
    handler: src/handlers/runTest.handler
    events:
      - http:
          path: /tests
          method: post
          cors: true
    layers:
      - arn:aws:lambda:${self:provider.region}:764866452798:layer:chrome-aws-lambda:40

  getTestResult:
    handler: src/handlers/getTestResult.handler
    events:
      - http:
          path: /tests/{testId}
          method: get
          cors: true

  listTests:
    handler: src/handlers/listTests.handler
    events:
      - http:
          path: /tests
          method: get
          cors: true

  createSchedule:
    handler: src/handlers/createSchedule.handler
    events:
      - http:
          path: /schedules
          method: post
          cors: true

  updateSchedule:
    handler: src/handlers/updateSchedule.handler
    events:
      - http:
          path: /schedules/{scheduleId}
          method: put
          cors: true

  deleteSchedule:
    handler: src/handlers/deleteSchedule.handler
    events:
      - http:
          path: /schedules/{scheduleId}
          method: delete
          cors: true

  listSchedules:
    handler: src/handlers/listSchedules.handler
    events:
      - http:
          path: /schedules
          method: get
          cors: true

  getAnalytics:
    handler: src/handlers/getAnalytics.handler
    events:
      - http:
          path: /analytics
          method: get
          cors: true

  processScheduledTests:
    handler: src/handlers/processScheduledTests.handler
    events:
      - schedule: rate(5 minutes)

resources:
  Resources:
    TestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-tests
        AttributeDefinitions:
          - AttributeName: testId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: testId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CreatedAtIndex
            KeySchema:
              - AttributeName: createdAt
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        BillingMode: PAY_PER_REQUEST

    SchedulesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-schedules
        AttributeDefinitions:
          - AttributeName: scheduleId
            AttributeType: S
          - AttributeName: nextRunTime
            AttributeType: S
        KeySchema:
          - AttributeName: scheduleId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: NextRunTimeIndex
            KeySchema:
              - AttributeName: nextRunTime
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        BillingMode: PAY_PER_REQUEST

    ResultsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.resultsBucket}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              MaxAge: 3000

    ResultsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ResultsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: !Join ['', ['arn:aws:s3:::', !Ref ResultsBucket, '/*']]

plugins:
  - serverless-webpack
  - serverless-prune-plugin